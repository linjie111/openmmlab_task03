{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.1, V11.1.105\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.8.2+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.2+cu111\nOpenCV: 4.5.3\nMMCV: 1.5.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMSegmentation: 0.30.0+8ea3ea3", "seed": 802955015, "exp_name": "city.py", "mmseg_version": "0.30.0+8ea3ea3", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'PascalVOCDataset'\ndata_root = '/openbayes/input/input0/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='PascalVOCDataset',\n        data_root='/openbayes/input/input0/',\n        img_dir='src',\n        ann_dir='label',\n        split='/openbayes/home/splits/train.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='PascalVOCDataset',\n        data_root='/openbayes/input/input0/test/',\n        img_dir='src',\n        ann_dir='label',\n        split='/openbayes/home/splits/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='PascalVOCDataset',\n        data_root='/openbayes/input/input0/test/',\n        img_dir='src',\n        ann_dir='label',\n        split='/openbayes/home/splits/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=10000)\ncheckpoint_config = dict(by_epoch=False, interval=2000)\nevaluation = dict(interval=2000, metric='mIoU', pre_eval=True)\nwork_dir = './work_dirs/city'\ngpu_ids = range(0, 1)\nauto_resume = False\ndevice = 'cuda'\nseed = 802955015\n", "CLASSES": ["background", "building"], "PALETTE": [[0, 0, 0], [0, 64, 128]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00498, "memory": 19893, "data_time": 0.00696, "decode.loss_ce": 0.02913, "decode.acc_seg": 77.91345, "aux.loss_ce": 0.03189, "aux.acc_seg": 76.10634, "loss": 0.06101, "time": 0.40635}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00496, "memory": 19893, "data_time": 0.00369, "decode.loss_ce": 0.00044, "decode.acc_seg": 80.06379, "aux.loss_ce": 0.00182, "aux.acc_seg": 80.06379, "loss": 0.00226, "time": 0.33562}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00493, "memory": 19893, "data_time": 0.00365, "decode.loss_ce": 0.0004, "decode.acc_seg": 78.59164, "aux.loss_ce": 0.00131, "aux.acc_seg": 78.59164, "loss": 0.00172, "time": 0.33398}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00491, "memory": 19893, "data_time": 0.00364, "decode.loss_ce": 0.00035, "decode.acc_seg": 78.35509, "aux.loss_ce": 0.00106, "aux.acc_seg": 78.35509, "loss": 0.00141, "time": 0.33456}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00489, "memory": 19893, "data_time": 0.00364, "decode.loss_ce": 0.00035, "decode.acc_seg": 78.65931, "aux.loss_ce": 0.00098, "aux.acc_seg": 78.65931, "loss": 0.00134, "time": 0.33486}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00487, "memory": 19893, "data_time": 0.00369, "decode.loss_ce": 0.00032, "decode.acc_seg": 79.62557, "aux.loss_ce": 0.00083, "aux.acc_seg": 79.62557, "loss": 0.00115, "time": 0.33546}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00485, "memory": 19893, "data_time": 0.00365, "decode.loss_ce": 0.00028, "decode.acc_seg": 79.18283, "aux.loss_ce": 0.0007, "aux.acc_seg": 79.18283, "loss": 0.00098, "time": 0.3359}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00482, "memory": 19893, "data_time": 0.00364, "decode.loss_ce": 0.00022, "decode.acc_seg": 77.59814, "aux.loss_ce": 0.00056, "aux.acc_seg": 77.59814, "loss": 0.00078, "time": 0.33613}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0048, "memory": 19893, "data_time": 0.00363, "decode.loss_ce": 0.00024, "decode.acc_seg": 76.87492, "aux.loss_ce": 0.00059, "aux.acc_seg": 76.87492, "loss": 0.00083, "time": 0.33612}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00478, "memory": 19893, "data_time": 0.00367, "decode.loss_ce": 0.00026, "decode.acc_seg": 77.39522, "aux.loss_ce": 0.00057, "aux.acc_seg": 77.39522, "loss": 0.00083, "time": 0.33619}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00476, "memory": 19893, "data_time": 0.00366, "decode.loss_ce": 0.00019, "decode.acc_seg": 77.02114, "aux.loss_ce": 0.00044, "aux.acc_seg": 77.02114, "loss": 0.00063, "time": 0.3362}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00474, "memory": 19893, "data_time": 0.00363, "decode.loss_ce": 0.00021, "decode.acc_seg": 78.4353, "aux.loss_ce": 0.00047, "aux.acc_seg": 78.4353, "loss": 0.00068, "time": 0.33626}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00471, "memory": 19893, "data_time": 0.00366, "decode.loss_ce": 0.00022, "decode.acc_seg": 80.23114, "aux.loss_ce": 0.00048, "aux.acc_seg": 80.23114, "loss": 0.00071, "time": 0.33629}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00469, "memory": 19893, "data_time": 0.00366, "decode.loss_ce": 0.0002, "decode.acc_seg": 76.37887, "aux.loss_ce": 0.00041, "aux.acc_seg": 76.37887, "loss": 0.00061, "time": 0.33671}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00467, "memory": 19893, "data_time": 0.00366, "decode.loss_ce": 0.0002, "decode.acc_seg": 79.55017, "aux.loss_ce": 0.00038, "aux.acc_seg": 79.55017, "loss": 0.00058, "time": 0.33642}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00465, "memory": 19893, "data_time": 0.00366, "decode.loss_ce": 0.00019, "decode.acc_seg": 79.59549, "aux.loss_ce": 0.00038, "aux.acc_seg": 79.59549, "loss": 0.00057, "time": 0.33645}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00462, "memory": 19893, "data_time": 0.00361, "decode.loss_ce": 0.00019, "decode.acc_seg": 78.09815, "aux.loss_ce": 0.00036, "aux.acc_seg": 78.09815, "loss": 0.00055, "time": 0.33617}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0046, "memory": 19893, "data_time": 0.00364, "decode.loss_ce": 0.00019, "decode.acc_seg": 79.52956, "aux.loss_ce": 0.00036, "aux.acc_seg": 79.52956, "loss": 0.00055, "time": 0.33642}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00458, "memory": 19893, "data_time": 0.00354, "decode.loss_ce": 0.00018, "decode.acc_seg": 77.93236, "aux.loss_ce": 0.00036, "aux.acc_seg": 77.93236, "loss": 0.00054, "time": 0.33602}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00456, "memory": 19893, "data_time": 0.0034, "decode.loss_ce": 0.00017, "decode.acc_seg": 77.69028, "aux.loss_ce": 0.00034, "aux.acc_seg": 77.69028, "loss": 0.0005, "time": 0.33598}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00453, "memory": 19893, "data_time": 0.00345, "decode.loss_ce": 0.00016, "decode.acc_seg": 78.9639, "aux.loss_ce": 0.00032, "aux.acc_seg": 78.9639, "loss": 0.00047, "time": 0.336}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00451, "memory": 19893, "data_time": 0.00343, "decode.loss_ce": 0.00014, "decode.acc_seg": 78.06859, "aux.loss_ce": 0.0003, "aux.acc_seg": 78.06859, "loss": 0.00045, "time": 0.33583}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00449, "memory": 19893, "data_time": 0.00357, "decode.loss_ce": 0.00016, "decode.acc_seg": 78.78853, "aux.loss_ce": 0.0003, "aux.acc_seg": 78.78853, "loss": 0.00046, "time": 0.33611}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00447, "memory": 19893, "data_time": 0.00361, "decode.loss_ce": 0.00017, "decode.acc_seg": 80.13187, "aux.loss_ce": 0.00032, "aux.acc_seg": 80.13187, "loss": 0.00049, "time": 0.33581}
{"mode": "train", "epoch": 2, "iter": 1250, "lr": 0.00445, "memory": 19893, "data_time": 0.0473, "decode.loss_ce": 0.00016, "decode.acc_seg": 79.35784, "aux.loss_ce": 0.0003, "aux.acc_seg": 79.35784, "loss": 0.00045, "time": 0.37857}
{"mode": "train", "epoch": 2, "iter": 1300, "lr": 0.00442, "memory": 19893, "data_time": 0.0038, "decode.loss_ce": 0.00014, "decode.acc_seg": 79.75744, "aux.loss_ce": 0.00027, "aux.acc_seg": 79.75744, "loss": 0.00041, "time": 0.33607}
{"mode": "train", "epoch": 2, "iter": 1350, "lr": 0.0044, "memory": 19893, "data_time": 0.00384, "decode.loss_ce": 0.00012, "decode.acc_seg": 76.31007, "aux.loss_ce": 0.00024, "aux.acc_seg": 76.31007, "loss": 0.00036, "time": 0.33597}
{"mode": "train", "epoch": 2, "iter": 1400, "lr": 0.00438, "memory": 19893, "data_time": 0.00381, "decode.loss_ce": 0.00013, "decode.acc_seg": 79.23918, "aux.loss_ce": 0.00025, "aux.acc_seg": 79.23918, "loss": 0.00038, "time": 0.33607}
{"mode": "train", "epoch": 2, "iter": 1450, "lr": 0.00436, "memory": 19893, "data_time": 0.00386, "decode.loss_ce": 0.00013, "decode.acc_seg": 79.84427, "aux.loss_ce": 0.00024, "aux.acc_seg": 79.84427, "loss": 0.00038, "time": 0.33585}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00433, "memory": 19893, "data_time": 0.00384, "decode.loss_ce": 0.00012, "decode.acc_seg": 79.24256, "aux.loss_ce": 0.00023, "aux.acc_seg": 79.24256, "loss": 0.00035, "time": 0.33606}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00431, "memory": 19893, "data_time": 0.00383, "decode.loss_ce": 0.00013, "decode.acc_seg": 78.078, "aux.loss_ce": 0.00027, "aux.acc_seg": 78.078, "loss": 0.0004, "time": 0.33585}
